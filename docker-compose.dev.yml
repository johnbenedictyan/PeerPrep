# User       - 01
# Matching   - 02
# Question   - 03
# Chat       - 04
# Video Call - 05

version: "3"
services:
  # user:
  #   container_name: user-service
  #   build:
  #     context: ./services/user-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/user-service/.env
  #   links:
  #     - broker
  #     - postgres_user_service

  # postgres_user_service:
  #   image: postgres:latest
  #   container_name: postgres-user-service
  #   volumes:
  #     - progresDB:/data/postgres/user-service
  #   env_file:
  #     - ./services/user-service/.env

  # matching:
  #   container_name: matching-service
  #   build:
  #     context: ./services/matching-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5002:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/matching-service/.env
  #   links:
  #     - broker
  #     - postgres_matching_service

  # postgres_matching_service:
  #   image: postgres:latest
  #   container_name: postgres-matching-service
  #   volumes:
  #     - progresDB:/data/postgres/matching-service
  #   env_file:
  #     - ./services/matching-service/.env

  # question:
  #   container_name: question-service
  #   build:
  #     context: ./services/question-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5003:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/question-service/.env
  #   links:
  #     - broker
  #     - postgres_question_service

  # postgres_question_service:
  #   image: postgres:latest
  #   container_name: postgres-question-service
  #   volumes:
  #     - progresDB:/data/postgres/question-service
  #   env_file:
  #     - ./services/question-service/.env

  # chat:
  #   container_name: chat-service
  #   build:
  #     context: ./services/chat-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5004:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/chat-service/.env
  #   links:
  #     - broker
  #     - postgres_chat_service

  # postgres_chat_service:
  #   image: postgres:latest
  #   container_name: postgres-chat-service
  #   volumes:
  #     - progresDB:/data/postgres/chat-service
  #   env_file:
  #     - ./services/chat-service/.env

  # video-call:
  #   container_name: video-call-service
  #   build:
  #     context: ./services/video-call-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5005:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/video-call-service/.env
  #   links:
  #     - broker
  #     - postgres_video_call_service

  # postgres_video_call_service:
  #   image: postgres:latest
  #   container_name: postgres-video-call-service
  #   volumes:
  #     - progresDB:/data/postgres/video-call-service
  #   env_file:
  #     - ./services/video-call-service/.env

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "81:80"

  # client2:
  #   container_name: client2
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   ports:
  #     - "82:80"

  # peer_server:
  #   container_name: peer-server
  #   image: peerjs/peerjs-server
  #   ports:
  #     - "9000:9000"

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # broker:
  #   image: confluentinc/cp-kafka:7.3.0
  #   container_name: broker
  #   ports:
  #     - "9092:9092"
  #   links:
  #     - zookeeper
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

volumes:
  progresDB:
