# User          - 01
# Matching      - 02
# Question      - 03
# Chat          - 04
# Video Call    - 05
# Socket        - 06
# Collaboration - 07

version: "3"
services:
  # user:
  #   container_name: user-service
  #   build:
  #     context: ./services/user-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/user-service/.env
  #   links:
  #     - broker
  #     - postgres_user_service
  #   depends_on:
  #     broker:
  #       condition: service_healthy

  # postgres_user_service:
  #   image: postgres:latest
  #   container_name: postgres-user-service
  #   volumes:
  #     - progresDB:/data/postgres/user-service
  #   env_file:
  #     - ./services/user-service/.env

  socket:
    container_name: socket-service
    build:
      context: ./services/socket-service
      dockerfile: Dockerfile
    ports:
      - "5006:5000"
    environment:
      - PORT=5000
    env_file:
      - ./services/socket-service/.env
    links:
      - broker
    depends_on:
      broker:
        condition: service_healthy

  matching:
    container_name: matching-service
    build:
      context: ./services/matching-service
      dockerfile: Dockerfile
    ports:
      - "5002:5000"
    environment:
      - PORT=5000
    env_file:
      - ./services/matching-service/.env
    links:
      - broker
      - postgres_matching_service
    depends_on:
      broker:
        condition: service_healthy

  postgres_matching_service:
    image: postgres:latest
    container_name: postgres-matching-service
    volumes:
      - progresDB:/data/postgres/matching-service
    env_file:
      - ./services/matching-service/.env

  collaboration:
    container_name: collaboration-service
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    ports:
      - "5007:5000"
    environment:
      - PORT=5000
    env_file:
      - ./services/collaboration-service/.env
    links:
      - broker
      - postgres_collaboration_service
    depends_on:
      broker:
        condition: service_healthy

  postgres_collaboration_service:
    image: postgres:latest
    container_name: postgres-collaboration-service
    volumes:
      - progresDB:/data/postgres/collaboration-service
    env_file:
      - ./services/collaboration-service/.env

  # question:
  #   container_name: question-service
  #   build:
  #     context: ./services/question-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5003:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/question-service/.env
  #   links:
  #     - broker
  #     - postgres_question_service
  #   depends_on:
  #     broker:
  #       condition: service_healthy

  # postgres_question_service:
  #   image: postgres:latest
  #   container_name: postgres-question-service
  #   volumes:
  #     - progresDB:/data/postgres/question-service
  #   env_file:
  #     - ./services/question-service/.env

  # chat:
  #   container_name: chat-service
  #   build:
  #     context: ./services/chat-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5004:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/chat-service/.env
  #   links:
  #     - broker
  #     - postgres_chat_service
  #   depends_on:
  #     broker:
  #       condition: service_healthy

  # postgres_chat_service:
  #   image: postgres:latest
  #   container_name: postgres-chat-service
  #   volumes:
  #     - progresDB:/data/postgres/chat-service
  #   env_file:
  #     - ./services/chat-service/.env

  # video-call:
  #   container_name: video-call-service
  #   build:
  #     context: ./services/video-call-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5005:5000"
  #   environment:
  #     - PORT=5000
  #   env_file:
  #     - ./services/video-call-service/.env
  #   links:
  #     - broker
  #     - postgres_video_call_service
  #   depends_on:
  #     broker:
  #       condition: service_healthy

  # postgres_video_call_service:
  #   image: postgres:latest
  #   container_name: postgres-video-call-service
  #   volumes:
  #     - progresDB:/data/postgres/video-call-service
  #   env_file:
  #     - ./services/video-call-service/.env

  # client:
  #   container_name: client
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "81:80"

  # client2:
  #   container_name: client2
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   ports:
  #     - "82:80"

  # peer_server:
  #   container_name: peer-server
  #   image: peerjs/peerjs-server
  #   ports:
  #     - "9000:9000"

  kong:
    image: kong:alpine
    hostname: kong
    container_name: kong
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "kong"
      KONG_PG_PASSWORD: "kong"
    networks:
      - kong-net
    depends_on:
      - kongDB

  kongDB:
    image: postgres:latest
    container_name: kong-database
    volumes:
      - kongDB:/data/postgres/kong
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    networks:
      - kong-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    volumes:
      - zookeeperDB:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    links:
      - zookeeper
    depends_on:
      - zookeeper
    volumes:
      - brokerDB:/var/lib/broker/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--bootstrap-server", "broker:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 5

networks:
  kong-net:
    external: false

volumes:
  progresDB:
  zookeeperDB:
  brokerDB:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
