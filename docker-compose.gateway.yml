version: '3.8'

services:
  traefik:
    image: "traefik:v2.5"
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=api_network"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true" # For Traefik Dashboard (Insecure, don't use in production)
    ports:
      - "80:80"
      - "8080:8080" # Traefik Dashboard
    networks:
      - api_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`localhost`)" # Access Traefik Dashboard at http://localhost:8080

  matching-service:
    build:
      context: ./services/matching-service
      dockerfile: Dockerfile
    expose:
      - 5000
    environment:
      - PORT=5000
    env_file:
    - ./services/matching-service/.env
    container_name: matching-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.matching.rule=PathPrefix(`/api/matching`)"
      - "traefik.http.services.matching.loadbalancer.server.port=5000"
    networks:
      - api_network
      - matching-service-network
      - kafka-network
    depends_on:
      postgres_matching_service:
        condition: service_healthy
      broker:
        condition: service_healthy

  postgres_matching_service:
    image: postgres:latest
    container_name: postgres-matching-service
    volumes:
      - progresDB:/data/postgres/matching-service
    env_file:
      - ./services/matching-service/.env
    networks:
      - matching-service-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "admin"]
      interval: 10s
      timeout: 3s
      retries: 3

  socket-service:
    build:
      context: ./services/socket-service
      dockerfile: Dockerfile
    expose:
      - 5000
    environment:
      - PORT=5000
    env_file:
    - ./services/socket-service/.env
    container_name: socket-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.socket.rule=PathPrefix(`/api/socket`)"
      - "traefik.http.services.socket.loadbalancer.server.port=5000"
    networks:
      - api_network
      - socket-service-network
      - kafka-network
    depends_on:
      broker:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  api_network:
    driver: bridge
  matching-service-network:
    driver: bridge
  socket-service-network:
    driver: bridge
  kafka-network:
    driver: bridge

volumes:
  progresDB:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
